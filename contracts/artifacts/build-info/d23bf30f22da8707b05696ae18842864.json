{
	"id": "d23bf30f22da8707b05696ae18842864",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.26",
	"solcLongVersion": "0.4.26+commit.4563c3fc",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/8.sol": {
				"content": "pragma solidity ^0.4.0;\r\n\r\ncontract Debugging {\r\n    \r\n    uint[] private vars;\r\n    \r\n    function assignment() public pure {\r\n        uint myVal1 = 1;\r\n        uint myVal2 = 2;\r\n        assert(myVal1 == myVal2);\r\n    }\r\n    \r\n    function memoryAlloc() public pure {\r\n        string memory myString = \"test\";\r\n        assert(bytes(myString).length == 10);\r\n    }\r\n    \r\n    function storageAlloc() public {\r\n        vars.push(2);\r\n        vars.push(3);\r\n        assert(vars.length == 4);\r\n    }\r\n    \r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/8.sol": {
				"Debugging": {
					"abi": [
						{
							"constant": false,
							"inputs": [],
							"name": "storageAlloc",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "assignment",
							"outputs": [],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "memoryAlloc",
							"outputs": [],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/8.sol\":27:505  contract Debugging {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/8.sol\":27:505  contract Debugging {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/8.sol\":27:505  contract Debugging {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0x4386cca5\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x71ca2ecf\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xc3e2b5e6\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"contracts/8.sol\":376:496  function storageAlloc() public {\r... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_5\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_5:\n        /* \"contracts/8.sol\":376:496  function storageAlloc() public {\r... */\n      pop\n      tag_6\n      jump(tag_7)\n    tag_6:\n      stop\n        /* \"contracts/8.sol\":91:220  function assignment() public pure {\r... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_8:\n        /* \"contracts/8.sol\":91:220  function assignment() public pure {\r... */\n      pop\n      tag_9\n      jump(tag_10)\n    tag_9:\n      stop\n        /* \"contracts/8.sol\":232:364  function memoryAlloc() public pure {\r... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_11:\n        /* \"contracts/8.sol\":232:364  function memoryAlloc() public pure {\r... */\n      pop\n      tag_12\n      jump(tag_13)\n    tag_12:\n      stop\n        /* \"contracts/8.sol\":376:496  function storageAlloc() public {\r... */\n    tag_7:\n        /* \"contracts/8.sol\":418:422  vars */\n      0x0\n        /* \"contracts/8.sol\":428:429  2 */\n      0x2\n        /* \"contracts/8.sol\":418:430  vars.push(2) */\n      swap1\n      dup1\n        /* \"--CODEGEN--\":39:40   */\n      0x1\n        /* \"--CODEGEN--\":33:36   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      sload\n        /* \"--CODEGEN--\":23:41   */\n      add\n        /* \"--CODEGEN--\":57:67   */\n      dup1\n        /* \"--CODEGEN--\":52:55   */\n      dup3\n        /* \"--CODEGEN--\":45:68   */\n      sstore\n        /* \"--CODEGEN--\":79:89   */\n      dup1\n        /* \"--CODEGEN--\":72:89   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:93   */\n      pop\n        /* \"contracts/8.sol\":418:430  vars.push(2) */\n      swap1\n      0x1\n      dup3\n      sub\n      swap1\n      0x0\n      mstore\n      keccak256(0x0, 0x20)\n      add\n      0x0\n      swap1\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      swap2\n      pop\n      sstore\n      pop\n        /* \"contracts/8.sol\":441:445  vars */\n      0x0\n        /* \"contracts/8.sol\":451:452  3 */\n      0x3\n        /* \"contracts/8.sol\":441:453  vars.push(3) */\n      swap1\n      dup1\n        /* \"--CODEGEN--\":39:40   */\n      0x1\n        /* \"--CODEGEN--\":33:36   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      sload\n        /* \"--CODEGEN--\":23:41   */\n      add\n        /* \"--CODEGEN--\":57:67   */\n      dup1\n        /* \"--CODEGEN--\":52:55   */\n      dup3\n        /* \"--CODEGEN--\":45:68   */\n      sstore\n        /* \"--CODEGEN--\":79:89   */\n      dup1\n        /* \"--CODEGEN--\":72:89   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:93   */\n      pop\n        /* \"contracts/8.sol\":441:453  vars.push(3) */\n      swap1\n      0x1\n      dup3\n      sub\n      swap1\n      0x0\n      mstore\n      keccak256(0x0, 0x20)\n      add\n      0x0\n      swap1\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      swap2\n      pop\n      sstore\n      pop\n        /* \"contracts/8.sol\":486:487  4 */\n      0x4\n        /* \"contracts/8.sol\":471:475  vars */\n      0x0\n        /* \"contracts/8.sol\":471:482  vars.length */\n      dup1\n      sload\n      swap1\n      pop\n        /* \"contracts/8.sol\":471:487  vars.length == 4 */\n      eq\n        /* \"contracts/8.sol\":464:488  assert(vars.length == 4) */\n      iszero\n      iszero\n      tag_17\n      jumpi\n      invalid\n    tag_17:\n        /* \"contracts/8.sol\":376:496  function storageAlloc() public {\r... */\n      jump\t// out\n        /* \"contracts/8.sol\":91:220  function assignment() public pure {\r... */\n    tag_10:\n        /* \"contracts/8.sol\":136:147  uint myVal1 */\n      0x0\n        /* \"contracts/8.sol\":162:173  uint myVal2 */\n      dup1\n        /* \"contracts/8.sol\":150:151  1 */\n      0x1\n        /* \"contracts/8.sol\":136:151  uint myVal1 = 1 */\n      swap2\n      pop\n        /* \"contracts/8.sol\":176:177  2 */\n      0x2\n        /* \"contracts/8.sol\":162:177  uint myVal2 = 2 */\n      swap1\n      pop\n        /* \"contracts/8.sol\":205:211  myVal2 */\n      dup1\n        /* \"contracts/8.sol\":195:201  myVal1 */\n      dup3\n        /* \"contracts/8.sol\":195:211  myVal1 == myVal2 */\n      eq\n        /* \"contracts/8.sol\":188:212  assert(myVal1 == myVal2) */\n      iszero\n      iszero\n      tag_19\n      jumpi\n      invalid\n    tag_19:\n        /* \"contracts/8.sol\":91:220  function assignment() public pure {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/8.sol\":232:364  function memoryAlloc() public pure {\r... */\n    tag_13:\n        /* \"contracts/8.sol\":278:300  string memory myString */\n      0x60\n        /* \"contracts/8.sol\":278:309  string memory myString = \"test\" */\n      0x40\n      dup1\n      mload\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      0x4\n      dup2\n      mstore\n      0x20\n      add\n      0x7465737400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/8.sol\":353:355  10 */\n      0xa\n        /* \"contracts/8.sol\":333:341  myString */\n      dup2\n        /* \"contracts/8.sol\":327:349  bytes(myString).length */\n      mload\n        /* \"contracts/8.sol\":327:355  bytes(myString).length == 10 */\n      eq\n        /* \"contracts/8.sol\":320:356  assert(bytes(myString).length == 10) */\n      iszero\n      iszero\n      tag_21\n      jumpi\n      invalid\n    tag_21:\n        /* \"contracts/8.sol\":232:364  function memoryAlloc() public pure {\r... */\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820c6fc3ef57c41bfd644b8d6ea86e5bd897459cdee8dc0b78d9cc7f66cabbfdf720029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061019e806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634386cca51461005c57806371ca2ecf14610073578063c3e2b5e61461008a575b600080fd5b34801561006857600080fd5b506100716100a1565b005b34801561007f57600080fd5b5061008861010e565b005b34801561009657600080fd5b5061009f610128565b005b600060029080600181540180825580915050906001820390600052602060002001600090919290919091505550600060039080600181540180825580915050906001820390600052602060002001600090919290919091505550600460008054905014151561010c57fe5b565b6000806001915060029050808214151561012457fe5b5050565b60606040805190810160405280600481526020017f74657374000000000000000000000000000000000000000000000000000000008152509050600a815114151561016f57fe5b505600a165627a7a72305820c6fc3ef57c41bfd644b8d6ea86e5bd897459cdee8dc0b78d9cc7f66cabbfdf720029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x4386CCA5 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x71CA2ECF EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0xC3E2B5E6 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71 PUSH2 0xA1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x88 PUSH2 0x10E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9F PUSH2 0x128 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP PUSH1 0x0 PUSH1 0x3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP PUSH1 0x4 PUSH1 0x0 DUP1 SLOAD SWAP1 POP EQ ISZERO ISZERO PUSH2 0x10C JUMPI INVALID JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP2 POP PUSH1 0x2 SWAP1 POP DUP1 DUP3 EQ ISZERO ISZERO PUSH2 0x124 JUMPI INVALID JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7465737400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH1 0xA DUP2 MLOAD EQ ISZERO ISZERO PUSH2 0x16F JUMPI INVALID JUMPDEST POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc6 0xfc RETURNDATACOPY 0xf5 PUSH29 0x41BFD644B8D6EA86E5BD897459CDEE8DC0B78D9CC7F66CABBFDF720029 ",
							"sourceMap": "27:478:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27:478:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634386cca51461005c57806371ca2ecf14610073578063c3e2b5e61461008a575b600080fd5b34801561006857600080fd5b506100716100a1565b005b34801561007f57600080fd5b5061008861010e565b005b34801561009657600080fd5b5061009f610128565b005b600060029080600181540180825580915050906001820390600052602060002001600090919290919091505550600060039080600181540180825580915050906001820390600052602060002001600090919290919091505550600460008054905014151561010c57fe5b565b6000806001915060029050808214151561012457fe5b5050565b60606040805190810160405280600481526020017f74657374000000000000000000000000000000000000000000000000000000008152509050600a815114151561016f57fe5b505600a165627a7a72305820c6fc3ef57c41bfd644b8d6ea86e5bd897459cdee8dc0b78d9cc7f66cabbfdf720029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x4386CCA5 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x71CA2ECF EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0xC3E2B5E6 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71 PUSH2 0xA1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x88 PUSH2 0x10E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9F PUSH2 0x128 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP PUSH1 0x0 PUSH1 0x3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP PUSH1 0x4 PUSH1 0x0 DUP1 SLOAD SWAP1 POP EQ ISZERO ISZERO PUSH2 0x10C JUMPI INVALID JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP2 POP PUSH1 0x2 SWAP1 POP DUP1 DUP3 EQ ISZERO ISZERO PUSH2 0x124 JUMPI INVALID JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7465737400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH1 0xA DUP2 MLOAD EQ ISZERO ISZERO PUSH2 0x16F JUMPI INVALID JUMPDEST POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc6 0xfc RETURNDATACOPY 0xf5 PUSH29 0x41BFD644B8D6EA86E5BD897459CDEE8DC0B78D9CC7F66CABBFDF720029 ",
							"sourceMap": "27:478:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;376:120;;8:9:-1;5:2;;;30:1;27;20:12;5:2;376:120:0;;;;;;91:129;;8:9:-1;5:2;;;30:1;27;20:12;5:2;91:129:0;;;;;;232:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;232:132:0;;;;;;376:120;418:4;428:1;418:12;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;418:12:0;;;;;;;;;;;;;;;;;;;;;;441:4;451:1;441:12;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;441:12:0;;;;;;;;;;;;;;;;;;;;;;486:1;471:4;:11;;;;:16;464:24;;;;;;376:120::o;91:129::-;136:11;162;150:1;136:15;;176:1;162:15;;205:6;195;:16;188:24;;;;;;91:129;;:::o;232:132::-;278:22;:31;;;;;;;;;;;;;;;;;;;;353:2;333:8;327:22;:28;320:36;;;;;;232:132;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "82800",
								"executionCost": "129",
								"totalCost": "82929"
							},
							"external": {
								"assignment()": "196",
								"memoryAlloc()": "269",
								"storageAlloc()": "81032"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 27,
									"end": 505,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "MSTORE"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "POP"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "DUP1"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "CODECOPY"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 505,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820c6fc3ef57c41bfd644b8d6ea86e5bd897459cdee8dc0b78d9cc7f66cabbfdf720029",
									".code": [
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "MSTORE"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "LT"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "SWAP1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "DIV"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "AND"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "4386CCA5"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "EQ"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "71CA2ECF"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "EQ"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "C3E2B5E6"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "EQ"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "JUMPDEST"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 505,
											"name": "REVERT"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "JUMPDEST"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "POP"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "JUMP"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "JUMPDEST"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "STOP"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "JUMPDEST"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "POP"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "JUMP"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "JUMPDEST"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "STOP"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "JUMPDEST"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "POP"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "JUMP"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "JUMPDEST"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "STOP"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "JUMPDEST"
										},
										{
											"begin": 418,
											"end": 422,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 428,
											"end": 429,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "DUP1"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "SLOAD"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "ADD"
										},
										{
											"begin": 57,
											"end": 67,
											"name": "DUP1"
										},
										{
											"begin": 52,
											"end": 55,
											"name": "DUP3"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SSTORE"
										},
										{
											"begin": 79,
											"end": 89,
											"name": "DUP1"
										},
										{
											"begin": 72,
											"end": 89,
											"name": "SWAP2"
										},
										{
											"begin": 72,
											"end": 89,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 93,
											"name": "POP"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "DUP3"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SUB"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "MSTORE"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "KECCAK256"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "ADD"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP2"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP3"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP2"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP1"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SWAP2"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "POP"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "SSTORE"
										},
										{
											"begin": 418,
											"end": 430,
											"name": "POP"
										},
										{
											"begin": 441,
											"end": 445,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 451,
											"end": 452,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "DUP1"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "SLOAD"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "ADD"
										},
										{
											"begin": 57,
											"end": 67,
											"name": "DUP1"
										},
										{
											"begin": 52,
											"end": 55,
											"name": "DUP3"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SSTORE"
										},
										{
											"begin": 79,
											"end": 89,
											"name": "DUP1"
										},
										{
											"begin": 72,
											"end": 89,
											"name": "SWAP2"
										},
										{
											"begin": 72,
											"end": 89,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 93,
											"name": "POP"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "DUP3"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SUB"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "MSTORE"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "KECCAK256"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "ADD"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP2"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP3"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP2"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SWAP2"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "POP"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "SSTORE"
										},
										{
											"begin": 441,
											"end": 453,
											"name": "POP"
										},
										{
											"begin": 486,
											"end": 487,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 471,
											"end": 475,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 471,
											"end": 482,
											"name": "DUP1"
										},
										{
											"begin": 471,
											"end": 482,
											"name": "SLOAD"
										},
										{
											"begin": 471,
											"end": 482,
											"name": "SWAP1"
										},
										{
											"begin": 471,
											"end": 482,
											"name": "POP"
										},
										{
											"begin": 471,
											"end": 487,
											"name": "EQ"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "ISZERO"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "ISZERO"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "JUMPI"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "INVALID"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 464,
											"end": 488,
											"name": "JUMPDEST"
										},
										{
											"begin": 376,
											"end": 496,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "JUMPDEST"
										},
										{
											"begin": 136,
											"end": 147,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 162,
											"end": 173,
											"name": "DUP1"
										},
										{
											"begin": 150,
											"end": 151,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 136,
											"end": 151,
											"name": "SWAP2"
										},
										{
											"begin": 136,
											"end": 151,
											"name": "POP"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 162,
											"end": 177,
											"name": "SWAP1"
										},
										{
											"begin": 162,
											"end": 177,
											"name": "POP"
										},
										{
											"begin": 205,
											"end": 211,
											"name": "DUP1"
										},
										{
											"begin": 195,
											"end": 201,
											"name": "DUP3"
										},
										{
											"begin": 195,
											"end": 211,
											"name": "EQ"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "ISZERO"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "ISZERO"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "JUMPI"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "INVALID"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 188,
											"end": 212,
											"name": "JUMPDEST"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "POP"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "POP"
										},
										{
											"begin": 91,
											"end": 220,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "JUMPDEST"
										},
										{
											"begin": 278,
											"end": 300,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "DUP1"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "MLOAD"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "SWAP1"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "DUP2"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "ADD"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "MSTORE"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "DUP1"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "DUP2"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "MSTORE"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "ADD"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "PUSH",
											"value": "7465737400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "DUP2"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "MSTORE"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "POP"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "SWAP1"
										},
										{
											"begin": 278,
											"end": 309,
											"name": "POP"
										},
										{
											"begin": 353,
											"end": 355,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 333,
											"end": 341,
											"name": "DUP2"
										},
										{
											"begin": 327,
											"end": 349,
											"name": "MLOAD"
										},
										{
											"begin": 327,
											"end": 355,
											"name": "EQ"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "ISZERO"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "ISZERO"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "JUMPI"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "INVALID"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 320,
											"end": 356,
											"name": "JUMPDEST"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "POP"
										},
										{
											"begin": 232,
											"end": 364,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"assignment()": "71ca2ecf",
							"memoryAlloc()": "c3e2b5e6",
							"storageAlloc()": "4386cca5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"storageAlloc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assignment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memoryAlloc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/8.sol\":\"Debugging\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/8.sol\":{\"keccak256\":\"0xcc45f624101714b9a91ae268b899d2bc4b0018ff9ffb4165b8ccc41df96ac00f\",\"urls\":[\"bzzr://fcb22367b22c03ab7bcbca862d4f164632fa56fdee9985d30bcf12a697e8e125\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contracts/8.sol": {
				"ast": {
					"absolutePath": "contracts/8.sol",
					"exportedSymbols": {
						"Debugging": [
							63
						]
					},
					"id": 64,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 63,
							"linearizedBaseContracts": [
								63
							],
							"name": "Debugging",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 4,
									"name": "vars",
									"nodeType": "VariableDeclaration",
									"scope": 63,
									"src": "59:19:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
										"typeString": "uint256[]"
									},
									"typeName": {
										"baseType": {
											"id": 2,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "59:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 3,
										"length": null,
										"nodeType": "ArrayTypeName",
										"src": "59:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
											"typeString": "uint256[]"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 21,
										"nodeType": "Block",
										"src": "125:95:0",
										"statements": [
											{
												"assignments": [
													8
												],
												"declarations": [
													{
														"constant": false,
														"id": 8,
														"name": "myVal1",
														"nodeType": "VariableDeclaration",
														"scope": 22,
														"src": "136:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 7,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "136:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 10,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "31",
													"id": 9,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "150:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "136:15:0"
											},
											{
												"assignments": [
													12
												],
												"declarations": [
													{
														"constant": false,
														"id": 12,
														"name": "myVal2",
														"nodeType": "VariableDeclaration",
														"scope": 22,
														"src": "162:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 11,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "162:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 14,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "32",
													"id": 13,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "176:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_2_by_1",
														"typeString": "int_const 2"
													},
													"value": "2"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "162:15:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 16,
																"name": "myVal1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 8,
																"src": "195:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 17,
																"name": "myVal2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 12,
																"src": "205:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "195:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 15,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "188:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "188:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 20,
												"nodeType": "ExpressionStatement",
												"src": "188:24:0"
											}
										]
									},
									"documentation": null,
									"id": 22,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "assignment",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "110:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "125:0:0"
									},
									"scope": 63,
									"src": "91:129:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 38,
										"nodeType": "Block",
										"src": "267:97:0",
										"statements": [
											{
												"assignments": [
													26
												],
												"declarations": [
													{
														"constant": false,
														"id": 26,
														"name": "myString",
														"nodeType": "VariableDeclaration",
														"scope": 39,
														"src": "278:22:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 25,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "278:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 28,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "74657374",
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "303:6:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb658",
														"typeString": "literal_string \"test\""
													},
													"value": "test"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "278:31:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 31,
																			"name": "myString",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 26,
																			"src": "333:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 30,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "327:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": "bytes"
																	},
																	"id": 32,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "327:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory",
																		"typeString": "bytes memory"
																	}
																},
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "327:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "3130",
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "353:2:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"src": "327:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 29,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "320:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "320:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "320:36:0"
											}
										]
									},
									"documentation": null,
									"id": 39,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "memoryAlloc",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "252:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "267:0:0"
									},
									"scope": 63,
									"src": "232:132:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "407:89:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "32",
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "428:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 42,
															"name": "vars",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4,
															"src": "418:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "418:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) returns (uint256)"
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "418:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 47,
												"nodeType": "ExpressionStatement",
												"src": "418:12:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "33",
															"id": 51,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "451:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 48,
															"name": "vars",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4,
															"src": "441:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 50,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "441:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) returns (uint256)"
														}
													},
													"id": 52,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "441:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 53,
												"nodeType": "ExpressionStatement",
												"src": "441:12:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 55,
																	"name": "vars",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4,
																	"src": "471:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																		"typeString": "uint256[] storage ref"
																	}
																},
																"id": 56,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "471:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "34",
																"id": 57,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "486:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"src": "471:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 54,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "464:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "464:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "464:24:0"
											}
										]
									},
									"documentation": null,
									"id": 62,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "storageAlloc",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "397:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "407:0:0"
									},
									"scope": 63,
									"src": "376:120:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 64,
							"src": "27:478:0"
						}
					],
					"src": "0:505:0"
				},
				"id": 0
			}
		}
	}
}